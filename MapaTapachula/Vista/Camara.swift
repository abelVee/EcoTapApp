import SwiftUI
import AVFoundation
import SafariServices

// MARK: - Barcode Scanner View
struct BarcodeScannerView: UIViewControllerRepresentable {
    @Binding var scannedCode: String?
    @Binding var scannedType: String?
    @Environment(\.presentationMode) var presentationMode
    
    func makeUIViewController(context: Context) -> ScannerViewController {
        let viewController = ScannerViewController()
        viewController.delegate = context.coordinator
        return viewController
    }
    
    func updateUIViewController(_ uiViewController: ScannerViewController, context: Context) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, ScannerDelegate {
        var parent: BarcodeScannerView
        
        init(_ parent: BarcodeScannerView) {
            self.parent = parent
        }
        
        func didFindCode(_ code: String, type: String) {
            parent.scannedCode = code
            parent.scannedType = type
            parent.presentationMode.wrappedValue.dismiss()
        }
        
        func didFailWithError(_ error: Error) {
            print("Scanner error: \(error.localizedDescription)")
        }
    }
}

// MARK: - Scanner Protocol
protocol ScannerDelegate: AnyObject {
    func didFindCode(_ code: String, type: String)
    func didFailWithError(_ error: Error)
}

// MARK: - Scanner View Controller
class ScannerViewController: UIViewController, AVCaptureMetadataOutputObjectsDelegate {
    var captureSession: AVCaptureSession!
    var previewLayer: AVCaptureVideoPreviewLayer!
    weak var delegate: ScannerDelegate?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupCamera()
    }
    
    func setupCamera() {
        captureSession = AVCaptureSession()
        
        guard let videoCaptureDevice = AVCaptureDevice.default(for: .video) else {
            delegate?.didFailWithError(NSError(domain: "Camera not found", code: -1))
            return
        }
        
        let videoInput: AVCaptureDeviceInput
        
        do {
            videoInput = try AVCaptureDeviceInput(device: videoCaptureDevice)
        } catch {
            delegate?.didFailWithError(error)
            return
        }
        
        if captureSession.canAddInput(videoInput) {
            captureSession.addInput(videoInput)
        } else {
            delegate?.didFailWithError(NSError(domain: "Cannot add camera input", code: -2))
            return
        }
        
        let metadataOutput = AVCaptureMetadataOutput()
        
        if captureSession.canAddOutput(metadataOutput) {
            captureSession.addOutput(metadataOutput)
            
            metadataOutput.setMetadataObjectsDelegate(self, queue: DispatchQueue.main)
            metadataOutput.metadataObjectTypes = [.qr, .ean13, .ean8, .code128, .upce, .pdf417]
            
            // Mejorar detecciÃ³n
            metadataOutput.rectOfInterest = CGRect(x: 0.2, y: 0.2, width: 0.6, height: 0.6)
        } else {
            delegate?.didFailWithError(NSError(domain: "Cannot setup scanner", code: -3))
            return
        }
        
        previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
        previewLayer.frame = view.layer.bounds
        previewLayer.videoGravity = .resizeAspectFill
        view.layer.addSublayer(previewLayer)
        
        // Marco de enfoque
        addFocusFrame()
        
        DispatchQueue.global(qos: .background).async {
            self.captureSession.startRunning()
        }
    }
    
    private func addFocusFrame() {
        let focusFrame = UIView()
        focusFrame.layer.borderColor = UIColor.green.cgColor
        focusFrame.layer.borderWidth = 2
        focusFrame.frame = CGRect(x: view.center.x - 100, y: view.center.y - 100, width: 200, height: 200)
        view.addSubview(focusFrame)
        
        // AnimaciÃ³n
        UIView.animate(withDuration: 1.0, delay: 0, options: [.repeat, .autoreverse], animations: {
            focusFrame.transform = CGAffineTransform(scaleX: 0.9, y: 0.9)
        })
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if !captureSession.isRunning {
            DispatchQueue.global(qos: .background).async {
                self.captureSession.startRunning()
            }
        }
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        if captureSession.isRunning {
            captureSession.stopRunning()
        }
    }
    
    func metadataOutput(_ output: AVCaptureMetadataOutput, didOutput metadataObjects: [AVMetadataObject], from connection: AVCaptureConnection) {
        if let metadataObject = metadataObjects.first {
            guard let readableObject = metadataObject as? AVMetadataMachineReadableCodeObject else { return }
            guard let code = readableObject.stringValue else { return }
            
            AudioServicesPlaySystemSound(SystemSoundID(kSystemSoundID_Vibrate))
            
            let type: String
            switch readableObject.type {
            case .qr: type = "QR"
            case .ean13: type = "EAN13"
            case .ean8: type = "EAN8"
            case .code128: type = "CODE128"
            case .upce: type = "UPC-E"
            case .pdf417: type = "PDF417"
            default: type = "OTHER"
            }
            
            delegate?.didFindCode(code, type: type)
        }
    }
}

// MARK: - Main Content View
struct ContentScanner: View {
    @State private var showScanner = false
    @State private var scannedCode: String?
    @State private var scannedType: String?
    @State private var scannedMaterial: MaterialType?
    @State private var showingSafariView = false
    
    enum MaterialType: String, CaseIterable {
        case plastic, glass, paper, aluminum, copper, other
        
        var icon: String {
            switch self {
            case .plastic: return "molecule"
            case .glass: return "cube.transparent"
            case .paper: return "newspaper"
            case .aluminum: return "cylinder"
            case .copper: return "bolt"
            case .other: return "questionmark.circle"
            }
        }
        
        var color: Color {
            switch self {
            case .plastic: return .blue
            case .glass: return .green
            case .paper: return .brown
            case .aluminum: return .gray
            case .copper: return .orange
            case .other: return .purple
            }
        }
        
        var impactDescription: String {
            switch self {
            case .plastic:
                return """
                ðŸš¯ Impacto en la ciudad:
                - Tarda 450 aÃ±os en degradarse
                - Contamina rÃ­os y ocÃ©anos
                - Puede obstruir desagÃ¼es causando inundaciones
                â™» Reciclaje: Contenedor amarillo
                """
                
            case .glass:
                return """
                ðŸš¯ Impacto en la ciudad:
                - No se degrada naturalmente
                - Puede causar incendios al concentrar luz solar
                - Heridas a personas y animales
                â™» Reciclaje: Contenedor verde (sin tapas metÃ¡licas)
                """
                
            case .paper:
                return """
                ðŸš¯ Impacto en la ciudad:
                - Su producciÃ³n deforesta bosques
                - En vertederos produce metano
                - Tinta contamina suelos
                â™» Reciclaje: Contenedor azul (sin manchas de grasa)
                """
                
            case .aluminum:
                return """
                ðŸš¯ Impacto en la ciudad:
                - MinerÃ­a destruye ecosistemas
                - ProducciÃ³n consume mucha energÃ­a
                - Puede acumular agua y criar mosquitos
                â™» Reciclaje: Contenedor amarillo (limpiar antes)
                """
                
            case .copper:
                return """
                ðŸš¯ Impacto en la ciudad:
                - MinerÃ­a altamente contaminante
                - OxidaciÃ³n contamina suelos
                - Puede ser robado afectando infraestructura
                â™» Reciclaje: Punto limpio especializado
                """
                
            case .other:
                return """
                â„¹ Consejo:
                Consulta en tu municipio el punto limpio mÃ¡s cercano.
                Los residuos no identificados pueden contaminar:
                - Suelos
                - Aguas subterrÃ¡neas
                - Aire por quema incontrolada
                """
            }
        }
    }
    
    var body: some View {
        ZStack {
            Color.white.ignoresSafeArea()
            
            VStack(spacing: 5) {
                HeaderView()
                
                if scannedType == "QR" {
                    QRResultView(code: scannedCode ?? "", showingSafariView: $showingSafariView)
                } else if let material = scannedMaterial {
                    ProductResultView(material: material, code: scannedCode ?? "")
                } else {
                    EmptyStateView()
                }
                
                Spacer()
                
                ScanButton(action: {
                    showScanner = true
                    scannedMaterial = nil
                    scannedCode = nil
                    scannedType = nil
                })
            }
            .padding(.top, 60)
        }
        .sheet(isPresented: $showScanner) {
            BarcodeScannerView(scannedCode: $scannedCode, scannedType: $scannedType)
                .onDisappear {
                    if let code = scannedCode, let type = scannedType {
                        processScannedCode(code: code, type: type)
                    }
                }
        }
        .sheet(isPresented: $showingSafariView) {
            if let url = URL(string: scannedCode ?? "") {
                SafariView(url: url)
            }
        }
    }
    
    func processScannedCode(code: String, type: String) {
        if type == "QR" {
            return // Solo procesamos cÃ³digos de barras para materiales
        }
        
        let cleanCode = code.replacingOccurrences(of: "[^0-9]", with: "", options: .regularExpression)
        
        // Base de datos ampliada de productos conocidos
        let knownProducts: [String: MaterialType] = [
            "7501055310883": .plastic,
            "75007614": .plastic,
            "750076140003": .plastic,
            "750104531012": .glass,
            "500533003880": .plastic,  // Botella de agua purificadora
            "500015940739": .plastic,  // Coca-Cola
            "500011263422": .plastic,  // Pepsi
            "400053803880": .plastic, // Ejemplo adicional
            "800512000123": .glass     // Ejemplo de vidrio
        ]
        
        // Primero verificamos si el cÃ³digo completo estÃ¡ en la base de datos
        if let material = knownProducts[cleanCode] {
            scannedMaterial = material
            return
        }
        
        // LÃ³gica mejorada para cÃ³digos no registrados
        switch cleanCode.prefix(3) {
        case "500", "501", "502", "503", "504", "505", "506", "507", "508", "509":
            // CÃ³digos que comienzan con 500-509 son tÃ­picamente del Reino Unido
            // Muchos productos de bebidas en estos cÃ³digos son plÃ¡sticos
            scannedMaterial = .plastic
            
        case "750":
            // CÃ³digos mexicanos
            if cleanCode.hasPrefix("750076") { scannedMaterial = .plastic }
            else if cleanCode.hasPrefix("750105") { scannedMaterial = .plastic }
            else if cleanCode.hasPrefix("750104") { scannedMaterial = .glass }
            else { scannedMaterial = .plastic } // Por defecto plÃ¡stico para cÃ³digos mexicanos
            
        case "40"..."49":
            // CÃ³digos que comienzan con 40-49 son tÃ­picamente de Alemania
            scannedMaterial = .plastic
            
        case "20"..."29":
            // CÃ³digos que comienzan con 20-29 son tÃ­picamente envases de vidrio
            scannedMaterial = .glass
            
        case "690"..."699":
            // CÃ³digos chinos - muchos son plÃ¡sticos
            scannedMaterial = .plastic
            
        default:
            // Para otros casos, verificamos la longitud del cÃ³digo
            if cleanCode.count == 8 || cleanCode.count == 12 || cleanCode.count == 13 {
                // Si tiene formato estÃ¡ndar de cÃ³digo de barras, asumimos plÃ¡stico (el mÃ¡s comÃºn)
                scannedMaterial = .plastic
            } else {
                scannedMaterial = .other
            }
        }
    }
}

// MARK: - Impact Details View
struct ImpactDetailsView: View {
    let impact: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 15) {
            HStack {
                Image(systemName: "exclamationmark.triangle.fill")
                    .foregroundColor(.red)
                Text("IMPACTO EN LA CIUDAD")
                    .font(.system(size: 16, weight: .bold, design: .rounded))
                    .foregroundColor(.red)
            }
            
            VStack(alignment: .leading, spacing: 12) {
                let parts = impact.components(separatedBy: "\n")
                ForEach(parts, id: \.self) { part in
                    if part.contains("ðŸš¯") {
                        Text(part)
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.primary)
                            .padding(.top, 4)
                    } else if part.contains("â™»") {
                        HStack(alignment: .top, spacing: 8) {
                            Image(systemName: "arrow.3.trianglepath")
                                .foregroundColor(.green)
                            Text(part)
                                .font(.system(size: 15, weight: .medium))
                                .foregroundColor(.primary)
                        }
                        .padding(.top, 8)
                    } else if part.contains("â„¹") {
                        HStack(alignment: .top, spacing: 8) {
                            Image(systemName: "info.circle")
                                .foregroundColor(.blue)
                            Text(part)
                                .font(.system(size: 15, weight: .medium))
                                .foregroundColor(.primary)
                        }
                        .padding(.top, 8)
                    } else {
                        HStack(alignment: .top, spacing: 8) {
                            Circle()
                                .frame(width: 6, height: 6)
                                .foregroundColor(.gray)
                                .padding(.top, 6)
                            Text(part)
                                .font(.system(size: 14))
                                .foregroundColor(.primary)
                        }
                    }
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(.secondarySystemBackground))
                    .shadow(color: .black.opacity(0.05), radius: 5, x: 0, y: 3)
            )
        }
    }
}

// MARK: - Recycling Tips View
struct RecyclingTipsView: View {
    let material: ContentScanner.MaterialType
    
    var body: some View {
        VStack(alignment: .leading, spacing: 15) {
            HStack {
                Image(systemName: "arrow.3.trianglepath")
                    .foregroundColor(.green)
                Text("CÃ“MO RECICLAR CORRECTAMENTE")
                    .font(.system(size: 16, weight: .bold, design: .rounded))
                    .foregroundColor(.green)
            }
            
            VStack(alignment: .leading, spacing: 12) {
                let tips = recyclingTips(for: material)
                ForEach(tips.indices, id: \.self) { index in
                    HStack(alignment: .top, spacing: 10) {
                        ZStack {
                            Circle()
                                .fill(Color.green.opacity(0.2))
                                .frame(width: 24, height: 24)
                            Text("\(index + 1)")
                                .font(.system(size: 12, weight: .bold))
                                .foregroundColor(.green)
                        }
                        
                        Text(tips[index])
                            .font(.system(size: 14, weight: .regular))
                            .foregroundColor(.primary)
                            .fixedSize(horizontal: false, vertical: true)
                    }
                    .padding(.vertical, 4)
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(.secondarySystemBackground))
                    .shadow(color: .black.opacity(0.05), radius: 5, x: 0, y: 3)
            )
        }
    }
    
    func recyclingTips(for material: ContentScanner.MaterialType) -> [String] {
        switch material {
        case .plastic:
            return [
                "Limpia los envases antes de reciclarlos para evitar contaminaciÃ³n",
                "Separa las tapas de los envases, ya que suelen ser de diferente material",
                "Compacta las botellas para ahorrar espacio en el contenedor"
            ]
        case .glass:
            return [
                "No mezcles vidrio con cristal (como vasos o ventanas), tienen composiciones diferentes",
                "Retira las tapas metÃ¡licas antes de depositar el vidrio",
                "No introduzcas vidrio roto en bolsas, deposÃ­talo directamente"
            ]
        case .paper:
            return [
                "No recicles papel manchado de grasa o comida (va al orgÃ¡nico)",
                "Retira los elementos plÃ¡sticos como ventanillas de sobres",
                "No es necesario quitar las grapas o clips pequeÃ±os"
            ]
        case .aluminum:
            return [
                "Limpia las latas de alimentos antes de reciclarlas",
                "Puedes compactar las latas para ahorrar espacio",
                "Las bandejas de aluminio deben estar limpias"
            ]
        case .copper:
            return [
                "Acumula cables y piezas en un lugar seguro hasta llevarlos a reciclar",
                "Los centros de reciclaje pagan por cobre limpio y bien separado",
                "Nunca quemes cables para extraer cobre, libera toxinas peligrosas"
            ]
        case .other:
            return [
                "Consulta en tu municipio los puntos limpios disponibles",
                "Para electrÃ³nicos, busca centros de reciclaje especializados",
                "Separa los componentes cuando sea posible (baterÃ­as, plÃ¡sticos, metales)"
            ]
        }
    }
}

// MARK: - Fun Facts View
struct FunFactsView: View {
    let material: ContentScanner.MaterialType
    
    var body: some View {
        VStack(alignment: .leading, spacing: 15) {
            HStack {
                Image(systemName: "lightbulb.fill")
                    .foregroundColor(.orange)
                Text("DATOS CURIOSOS")
                    .font(.system(size: 16, weight: .bold, design: .rounded))
                    .foregroundColor(.orange)
            }
            
            VStack(alignment: .leading, spacing: 10) {
                let facts = funFacts(for: material)
                ForEach(facts.indices, id: \.self) { index in
                    HStack(alignment: .top, spacing: 10) {
                        Image(systemName: "sparkles")
                            .foregroundColor(.yellow)
                        
                        Text(facts[index])
                            .font(.system(size: 14, weight: .regular))
                            .foregroundColor(.primary)
                            .fixedSize(horizontal: false, vertical: true)
                    }
                    .padding(.vertical, 4)
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(.secondarySystemBackground))
                    .shadow(color: .black.opacity(0.05), radius: 5, x: 0, y: 3)
            )
        }
    }
    
    func funFacts(for material: ContentScanner.MaterialType) -> [String] {
        switch material {
        case .plastic:
            return [
                "Reciclar una botella de plÃ¡stico puede ahorrar energÃ­a suficiente para mantener encendida una bombilla de 60W durante 3 horas",
                "El plÃ¡stico en el ocÃ©ano mata mÃ¡s de 1 millÃ³n de animales marinos cada aÃ±o",
                "Una bolsa de plÃ¡stico tarda hasta 400 aÃ±os en degradarse"
            ]
        case .glass:
            return [
                "El vidrio se puede reciclar infinitamente sin perder calidad",
                "Reciclar vidrio ahorra un 30% de energÃ­a comparado con producirlo nuevo",
                "Una botella de vidrio tarda aproximadamente 4,000 aÃ±os en descomponerse"
            ]
        case .paper:
            return [
                "Reciclar una tonelada de papel salva 17 Ã¡rboles",
                "El papel reciclado usa un 60% menos de energÃ­a que hacer papel nuevo",
                "Cada persona usa en promedio 190 kg de papel al aÃ±o"
            ]
        case .aluminum:
            return [
                "Reciclar aluminio ahorra un 95% de la energÃ­a necesaria para producirlo nuevo",
                "Una lata de aluminio puede ser reciclada y estar de vuelta en el estante en 60 dÃ­as",
                "Las latas de aluminio son los envases mÃ¡s reciclados del mundo"
            ]
        case .copper:
            return [
                "El cobre es 100% reciclable sin pÃ©rdida de calidad",
                "Cerca del 80% del cobre extraÃ­do sigue en uso hoy dÃ­a",
                "Reciclar cobre usa un 85% menos de energÃ­a que producirlo nuevo"
            ]
        case .other:
            return [
                "Los residuos electrÃ³nicos contienen oro, plata y otros metales preciosos",
                "Reciclar un telÃ©fono mÃ³vil puede ahorrar suficiente energÃ­a para cargar un laptop durante 44 horas",
                "Los vertederos son la tercera fuente mÃ¡s grande de metano, un potente gas de efecto invernadero"
            ]
        }
    }
}

// MARK: - Safari View
struct SafariView: UIViewControllerRepresentable {
    let url: URL
    
    func makeUIViewController(context: Context) -> SFSafariViewController {
        SFSafariViewController(url: url)
    }
    
    func updateUIViewController(_ uiViewController: SFSafariViewController, context: Context) {}
}

// MARK: - QR Result View
struct QRResultView: View {
    let code: String
    @Binding var showingSafariView: Bool
    
    var body: some View {
        VStack(spacing: 20) {
            Image(systemName: "qrcode")
                .font(.system(size: 60))
                .foregroundColor(.purple)
            
            VStack(alignment: .leading, spacing: 10) {
                if code.isValidURL {
                    Text("Enlace detectado:")
                        .font(.headline)
                    
                    Text(code)
                        .font(.caption)
                        .foregroundColor(.blue)
                        .lineLimit(2)
                    
                    Button(action: {
                        showingSafariView = true
                    }) {
                        HStack {
                            Image(systemName: "safari")
                            Text("Abrir en navegador")
                        }
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                    }
                } else {
                    Text("Contenido del QR:")
                        .font(.headline)
                    
                    Text(code)
                        .font(.body)
                        .padding()
                        .background(Color.gray.opacity(0.1))
                        .cornerRadius(8)
                    
                    Button(action: {
                        UIPasteboard.general.string = code
                    }) {
                        HStack {
                            Image(systemName: "doc.on.doc")
                            Text("Copiar contenido")
                        }
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                    }
                }
            }
            .padding()
            .background(Color.white)
            .cornerRadius(12)
            .shadow(radius: 5)
            .padding(.horizontal, 20)
        }
    }
}

// MARK: - Product Result View
struct ProductResultView: View {
    let material: ContentScanner.MaterialType
    let code: String
    
    var body: some View {
        ScrollView {
            VStack(spacing: 25) {
                // Header con icono y tÃ­tulo
                VStack(spacing: 10) {
                    ZStack {
                        Circle()
                            .fill(material.color.opacity(0.2))
                            .frame(width: 100, height: 100)
                        
                        Image(systemName: material.icon)
                            .font(.system(size: 50))
                            .foregroundColor(material.color)
                    }
                    
                    Text(material.rawValue.capitalized)
                        .font(.system(size: 28, weight: .bold, design: .rounded))
                        .foregroundColor(material.color)
                        .padding(.top, 5)
                }
                .padding(.top, 20)
                
                // SecciÃ³n de Impacto Ambiental
                ImpactDetailsView(impact: material.impactDescription)
                    .padding(.horizontal, 20)
                
                // SecciÃ³n de Consejos de Reciclaje
                RecyclingTipsView(material: material)
                    .padding(.horizontal, 20)
                
                // Datos Curiosos
                FunFactsView(material: material)
                    .padding(.horizontal, 20)
                
                // Mensaje para cÃ³digos no reconocidos
                if material == .other {
                    VStack(alignment: .leading, spacing: 15) {
                        HStack {
                            Image(systemName: "questionmark.circle.fill")
                                .foregroundColor(.purple)
                            Text("CÃ“DIGO NO RECONOCIDO")
                                .font(.system(size: 16, weight: .bold, design: .rounded))
                                .foregroundColor(.purple)
                        }
                        
                        Text("El cÃ³digo \(code) no estÃ¡ en nuestra base de datos. Hemos clasificado el material como 'Otro' basado en el formato del cÃ³digo.")
                            .font(.system(size: 14))
                            .foregroundColor(.secondary)
                        
                        Text("Â¿Es esta clasificaciÃ³n incorrecta? Por favor contÃ¡ctanos para ayudarnos a mejorar.")
                            .font(.system(size: 14, weight: .medium))
                            .foregroundColor(.primary)
                    }
                    .padding()
                    .background(
                        RoundedRectangle(cornerRadius: 12)
                            .fill(Color(.secondarySystemBackground))
                    )
                    .padding(.horizontal, 20)
                }
                
                Spacer()
            }
        }
        .background(Color(.systemGroupedBackground))
    }
}

// MARK: - Header View
struct HeaderView: View {
    var body: some View {
        VStack {
            Image(systemName: "barcode.viewfinder")
                .font(.system(size: 50))
                .foregroundColor(.green)
            
            Text("EcoScanner")
                .font(.largeTitle)
                .fontWeight(.bold)
                .foregroundColor(.green)
            
            Text("Escanea cÃ³digos QR o de barras")
                .font(.subheadline)
                .foregroundColor(.gray)
        }
    }
}

// MARK: - Empty State View
struct EmptyStateView: View {
    var body: some View {
        VStack(spacing: 15) {
            Image(systemName: "barcode")
                .font(.system(size: 60))
                .foregroundColor(.gray.opacity(0.5))
            
            Text("Escanea un cÃ³digo")
                .font(.title2)
                .foregroundColor(.gray)
            
            Text("QR para credenciales o cÃ³digo de barras para productos")
                .font(.subheadline)
                .foregroundColor(.gray.opacity(0.7))
                .multilineTextAlignment(.center)
        }
        .padding(.vertical, 120)
    }
}

// MARK: - Scan Button
struct ScanButton: View {
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack {
                Image(systemName: "barcode.viewfinder")
                Text("Escanear")
            }
            .padding()
            .frame(width: 200)
            .background(Color.green)
            .foregroundColor(.white)
            .cornerRadius(25)
            .shadow(radius: 5)
        }
        .padding(.bottom, 10)
    }
}

// MARK: - ExtensiÃ³n para validar URLs
extension String {
    var isValidURL: Bool {
        if let url = URL(string: self) {
            return UIApplication.shared.canOpenURL(url)
        }
        return false
    }
}

#Preview {
    ContentScanner()
}
